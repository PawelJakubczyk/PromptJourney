// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistans.Context;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(MidjourneyDbContext))]
    partial class MidjourneyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.MidjourneyPromtHistory.MidjourneyPromptHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("history_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("prompt");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(7)")
                        .HasColumnName("properties");

                    b.HasKey("HistoryId");

                    b.HasIndex("Version");

                    b.ToTable("midjourney_prompt_history", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyStyles.MidjourneyStyle", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(800)")
                        .HasColumnName("description");

                    b.PrimitiveCollection<string[]>("ExampleLinks")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("example_links");

                    b.PrimitiveCollection<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.HasKey("Name");

                    b.ToTable("midjourney_styles", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion1", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_1", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion2", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_2", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion3", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_3", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion4", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_4", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion5", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_5", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion51", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_5_1", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion52", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_5_2", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion6", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_6", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion61", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_6_1", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion7", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_7", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersionNiji4", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_niji_4", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersionNiji5", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_niji_5", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersionNiji6", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.PrimitiveCollection<string[]>("Parameter")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("parameter");

                    b.PrimitiveCollection<string[]>("ParameterModes")
                        .HasColumnType("text[]")
                        .HasColumnName("parameter_modes");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.ToTable("version_niji_6", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("parameter");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.HasKey("Version");

                    b.ToTable("version_master", "public");
                });

            modelBuilder.Entity("MidjourneyPromptHistoryMidjourneyStyle", b =>
                {
                    b.Property<Guid>("MidjourneyPromptHistoriesHistoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("MidjourneyStylesName")
                        .HasColumnType("varchar(150)");

                    b.HasKey("MidjourneyPromptHistoriesHistoryId", "MidjourneyStylesName");

                    b.HasIndex("MidjourneyStylesName");

                    b.ToTable("MidjourneyPromptHistoryMidjourneyStyle", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyPromtHistory.MidjourneyPromptHistory", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Histories")
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion1", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Versions1")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion2", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Versions2")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion3", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Versions3")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion4", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Versions4")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion5", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Versions5")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion51", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Versions51")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion52", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Versions52")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion6", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Versions6")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion61", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Versions61")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersion7", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("Versions7")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersionNiji4", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("VersionsNiji4")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersionNiji5", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("VersionsNiji5")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyAllVersions+MidjourneyVersionNiji6", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", "VersionMaster")
                        .WithMany("VersionsNiji6")
                        .HasForeignKey("PropertyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("MidjourneyPromptHistoryMidjourneyStyle", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyPromtHistory.MidjourneyPromptHistory", null)
                        .WithMany()
                        .HasForeignKey("MidjourneyPromptHistoriesHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MidjourneyStyles.MidjourneyStyle", null)
                        .WithMany()
                        .HasForeignKey("MidjourneyStylesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersions.MidjourneyVersionsMaster", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Versions1");

                    b.Navigation("Versions2");

                    b.Navigation("Versions3");

                    b.Navigation("Versions4");

                    b.Navigation("Versions5");

                    b.Navigation("Versions51");

                    b.Navigation("Versions52");

                    b.Navigation("Versions6");

                    b.Navigation("Versions61");

                    b.Navigation("Versions7");

                    b.Navigation("VersionsNiji4");

                    b.Navigation("VersionsNiji5");

                    b.Navigation("VersionsNiji6");
                });
#pragma warning restore 612, 618
        }
    }
}
