// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(MidjourneyDbContext))]
    partial class MidjourneyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion1", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_1", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion2", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_2", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion3", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_3", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion4", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_4", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion5", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_5", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion51", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_5_1", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion52", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_5_2", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion6", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_6", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion61", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_6_1", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion7", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_7", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersionNiji4", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_niji_4", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersionNiji5", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_niji_5", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersionNiji6", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MidjourneyVersionVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("PropertyName");

                    b.HasIndex("MidjourneyVersionVersion");

                    b.HasIndex("Version");

                    b.ToTable("properties_version_niji_6", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyPromptHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Uuid")
                        .HasColumnName("history_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("prompt");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("properties");

                    b.HasKey("HistoryId");

                    b.HasIndex("Version");

                    b.ToTable("midjourney_prompt_history", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyStyle", b =>
                {
                    b.Property<string>("StyleName")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string[]>("Tags")
                        .HasColumnType("Text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("type");

                    b.HasKey("StyleName");

                    b.ToTable("midjourney_styles", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyStyleExampleLink", b =>
                {
                    b.Property<string>("Link")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("link");

                    b.Property<string>("StyleName")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("style_name");

                    b.Property<string>("Version")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("Link", "StyleName", "Version");

                    b.HasIndex("StyleName");

                    b.HasIndex("Version");

                    b.ToTable("midjourney_style_example_links", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersion", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("parameter");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.HasKey("Version");

                    b.ToTable("version_master", "public");
                });

            modelBuilder.Entity("MidjourneyPromptHistoryMidjourneyStyle", b =>
                {
                    b.Property<Guid>("MidjourneyPromptHistoriesHistoryId")
                        .HasColumnType("Uuid");

                    b.Property<string>("MidjourneyStylesStyleName")
                        .HasColumnType("varchar(150)");

                    b.HasKey("MidjourneyPromptHistoriesHistoryId", "MidjourneyStylesStyleName");

                    b.HasIndex("MidjourneyStylesStyleName");

                    b.ToTable("MidjourneyPromptHistoryMidjourneyStyle", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion1", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("Versions1")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion2", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("Versions2")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion3", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("Versions3")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion4", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("Versions4")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion5", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("Versions5")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion51", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("Versions51")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion52", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("Versions52")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion6", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("Versions6")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion61", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("Versions61")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersion7", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("Versions7")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersionNiji4", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("VersionsNiji4")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersionNiji5", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("VersionsNiji5")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyAllPropertiesVersions+MidjourneyPropertiesVersionNiji6", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", null)
                        .WithMany("VersionsNiji6")
                        .HasForeignKey("MidjourneyVersionVersion");

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyPromptHistory", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany("Histories")
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyStyleExampleLink", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyStyle", "Style")
                        .WithMany("ExampleLinks")
                        .HasForeignKey("StyleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Style");

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("MidjourneyPromptHistoryMidjourneyStyle", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyPromptHistory", null)
                        .WithMany()
                        .HasForeignKey("MidjourneyPromptHistoriesHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MidjourneyStyle", null)
                        .WithMany()
                        .HasForeignKey("MidjourneyStylesStyleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyStyle", b =>
                {
                    b.Navigation("ExampleLinks");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersion", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Versions1");

                    b.Navigation("Versions2");

                    b.Navigation("Versions3");

                    b.Navigation("Versions4");

                    b.Navigation("Versions5");

                    b.Navigation("Versions51");

                    b.Navigation("Versions52");

                    b.Navigation("Versions6");

                    b.Navigation("Versions61");

                    b.Navigation("Versions7");

                    b.Navigation("VersionsNiji4");

                    b.Navigation("VersionsNiji5");

                    b.Navigation("VersionsNiji6");
                });
#pragma warning restore 612, 618
        }
    }
}
