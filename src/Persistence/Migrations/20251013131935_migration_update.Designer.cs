// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(MidjourneyDbContext))]
    [Migration("20251013131935_migration_update")]
    partial class migration_update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.MidjourneyPromptHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Uuid")
                        .HasColumnName("history_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("prompt");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("properties");

                    b.HasKey("HistoryId");

                    b.HasIndex("Prompt")
                        .HasDatabaseName("IX_midjourney_prompt_history_prompt");

                    b.HasIndex("Version");

                    b.ToTable("midjourney_prompt_history", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyProperties", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("property_name");

                    b.Property<string>("Version")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_value");

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_value");

                    b.Property<string[]>("Parameters")
                        .IsRequired()
                        .HasColumnType("Text[]")
                        .HasColumnName("parameters");

                    b.HasKey("PropertyName", "Version");

                    b.HasIndex("PropertyName")
                        .HasDatabaseName("IX_midjourney_properties_property_name");

                    b.HasIndex("Version")
                        .HasDatabaseName("IX_midjourney_properties_version");

                    b.ToTable("midjourney_properties", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyStyle", b =>
                {
                    b.Property<string>("StyleName")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string[]>("Tags")
                        .HasColumnType("Text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("type");

                    b.HasKey("StyleName");

                    b.HasIndex("Tags")
                        .HasDatabaseName("IX_midjourney_styles_tags");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_midjourney_styles_type");

                    b.ToTable("midjourney_styles", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyStyleExampleLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Uuid")
                        .HasColumnName("id");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("link");

                    b.Property<string>("StyleName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("style_name");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("StyleName")
                        .HasDatabaseName("IX_midjourney_style_example_links_style_name");

                    b.HasIndex("Version")
                        .HasDatabaseName("IX_midjourney_style_example_links_version");

                    b.ToTable("midjourney_style_example_links", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersion", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.Property<string>("Description")
                        .HasColumnType("Text")
                        .HasColumnName("description");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("parameter");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.HasKey("Version");

                    b.ToTable("midjourney_versions", "public");
                });

            modelBuilder.Entity("MidjourneyPromptHistoryMidjourneyStyle", b =>
                {
                    b.Property<Guid>("MidjourneyPromptHistoriesHistoryId")
                        .HasColumnType("Uuid");

                    b.Property<string>("MidjourneyStylesStyleName")
                        .HasColumnType("varchar(150)");

                    b.HasKey("MidjourneyPromptHistoriesHistoryId", "MidjourneyStylesStyleName");

                    b.HasIndex("MidjourneyStylesStyleName");

                    b.ToTable("MidjourneyPromptHistoryMidjourneyStyle", "public");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyPromptHistory", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", "MidjourneyVersion")
                        .WithMany("Histories")
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MidjourneyVersion");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyProperties", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyVersion", "MidjourneyVersion")
                        .WithMany("Properties")
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MidjourneyVersion");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyStyleExampleLink", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyStyle", "Style")
                        .WithMany("ExampleLinks")
                        .HasForeignKey("StyleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MidjourneyVersion", "VersionMaster")
                        .WithMany()
                        .HasForeignKey("Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Style");

                    b.Navigation("VersionMaster");
                });

            modelBuilder.Entity("MidjourneyPromptHistoryMidjourneyStyle", b =>
                {
                    b.HasOne("Domain.Entities.MidjourneyPromptHistory", null)
                        .WithMany()
                        .HasForeignKey("MidjourneyPromptHistoriesHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MidjourneyStyle", null)
                        .WithMany()
                        .HasForeignKey("MidjourneyStylesStyleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyStyle", b =>
                {
                    b.Navigation("ExampleLinks");
                });

            modelBuilder.Entity("Domain.Entities.MidjourneyVersion", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
